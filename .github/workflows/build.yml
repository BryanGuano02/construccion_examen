name: Java web Build

on:
  push:
    branches: [ main ]
jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Descargar el repositorio
      uses: actions/checkout@v4
    - name: Configurar JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Construir con Maven
      run: mvn -B compile --file pom.xml

    - name: Correr tests de calidad con PMD
      run: mvn -B pmd:check --file pom.xml
      continue-on-error: true

    # - name: Correr análisis de código estático con SpotBugs
    #   run: mvn -B spotbugs:check --file pom.xml
    #   continue-on-error: true

    - name: Correr unit tests
      run: mvn -B test --file pom.xml

    - name: Package application
      run: mvn -B package --file pom.xml -DskipTests

    - name: Upload WAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: webapp
        path: target/ROOT.war    # Pasos para construir la imagen Docker
    - name: Verificar estado de Docker Desktop
      run: |
        # Verificar si el servicio Docker Desktop está ejecutándose
        $dockerDesktopService = Get-Service -Name "com.docker.service" -ErrorAction SilentlyContinue
        if ($dockerDesktopService -and $dockerDesktopService.Status -ne "Running") {
            Write-Host "Docker Desktop no está ejecutándose. Intentando iniciar el servicio..."
            Start-Service "com.docker.service"
            Start-Sleep -Seconds 30
        } elseif (!$dockerDesktopService) {
            Write-Host "El servicio Docker Desktop no está instalado o tiene otro nombre."
        } else {
            Write-Host "Docker Desktop está ejecutándose."
        }

        # Verificar Docker CLI
        docker --version
      shell: pwsh
      continue-on-error: true

    - name: Construir imagen Docker manualmente
      run: |
        # Verificar si Docker funciona
        if (docker info) {
            Write-Host "Docker está disponible. Construyendo la imagen..."
            docker build -t ufood:latest -f ./Dockerfile .
            docker images ufood
        } else {
            Write-Host "Docker no está disponible. Omitiendo la construcción de la imagen."
            exit 0
        }
      shell: pwsh
      continue-on-error: true
